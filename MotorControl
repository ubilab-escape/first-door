//--------------Ubilab - Escape Room WS 2019---------------------
//-----------Group 4 - Both doors + Entry Puzzle-----------------
//Code for motor control of the sliding door (Anteroom --> Labroom) 


//Input Commands for control of the Door:
//    -open
//    -close
//    -stop


//
#include <AccelStepper.h>


//Define pin connections
#define enPin 25
#define dirPin 32
#define pulPin 33
#define interruptOpenPin 26
#define interruptClosePin 27

const int acceleration = 200;
const int maxVelocity = 800;
const int minVelocity = 300; //unter 300 steps/sec -->microstepping : Dann alle Steps mit Faktor multiplizieren
const int calVelocity = 300;
const int minVelSteps = 800; 
const int breakSteps = 0.5*sq(minVelocity)/acceleration ;
const int moveOn = 400;
int curPos;
int endPosition;
int maxSteps;

//Input variables and commands
String openDoor = "open";
String closeDoor = "close";
String stopDoor = "stop";

String inputCommand;
bool newInput = false;


//Interrupt variables
volatile int interruptFlagO = 0;
volatile int interruptFlagC = 0;

AccelStepper door1(1,pulPin, dirPin);








void setup() {
  
  Serial.begin(115200);

  //Pin declaration
  pinMode(enPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(pulPin, OUTPUT);
  pinMode(interruptOpenPin, INPUT_PULLUP);
  pinMode(interruptClosePin, INPUT_PULLUP);
   
  //Interrupt for door stop detection
  attachInterrupt(digitalPinToInterrupt(interruptOpenPin),interruptOpen,FALLING); //Interrupt at the end of door opening due to switch touching
  attachInterrupt(digitalPinToInterrupt(interruptClosePin),interruptClose,FALLING); //Interrupt at the end of door closing due to switch touching

  door1.setMaxSpeed(calVelocity);
  door1.setAcceleration(acceleration);
   
  digitalWrite(enPin, LOW); //Enable Driving Stage
  calibration();
  digitalWrite(enPin, HIGH); //Disable Driving Stage
  
  Serial.print("MaxSteps:");
  Serial.println(maxSteps);

  Serial.println("Setup done");
}










void loop() 
  {
    checkSerialMonitor(); //check serial monitor for new command

    if(newInput == true)
      {
    
        if( inputCommand == openDoor ) //open door 
          {
          openDoorFunc();
          }
          
        else if( inputCommand == closeDoor ) //close door
          {
          closeDoorFunc();
          }

        else if( inputCommand == stopDoor ) //stop door
          {
          //stopDoorFunc();
          }      
      }   
  }
    


    
//Funktionen

void interruptOpen()
  {
  interruptFlagO++;
  Serial.println("An interrupt (open) has occurred!");
  Serial.println("Counter:");
  Serial.println(interruptFlagO);
  }

void interruptClose()
  {
  interruptFlagC++;
  Serial.println("An interrupt (close) has occurred!");
  Serial.println("Counter:");
  Serial.println(interruptFlagC);
  }





void calibration()
  {
    Serial.println("Calibration in progress");     
    digitalWrite(enPin, LOW); //Enable Driving Stage
    
    interruptFlagO = 0;
    while(interruptFlagO == 0)
    {     
      door1.setSpeed(calVelocity);
      door1.runSpeed();  
    }
      
    door1.setCurrentPosition(0);
    delay(1000);
    
    interruptFlagC = 0;
    while(interruptFlagC == 0)
    {
      door1.setSpeed(-calVelocity);
      door1.runSpeed();
    }
    maxSteps=abs(door1.currentPosition());
    door1.setCurrentPosition(0); 
    digitalWrite(enPin, HIGH); //Disable Driving Stage
    
    Serial.println("Calibration done!");
    }






void checkSerialMonitor()
  {
    if(Serial.available()>0)  
      {
      inputCommand = Serial.readString(); //save serial communication in variable
      inputCommand.trim();
      Serial.println("Receive input:");
      Serial.println(inputCommand);
      newInput = true; 
      }
   }




void closeDoorFunc()
  {
    newInput = false; //Reset input variable
    interruptFlagC = 0;
    Serial.println("Door closes!");
    digitalWrite(enPin, LOW); //Enable Driving Stage
    door1.setAcceleration(acceleration);
    door1.setMaxSpeed(0);  
    curPos = door1.currentPosition(); 
    Serial.println(curPos);       

    if(curPos > minVelSteps)
    {
      endPosition = minVelSteps-breakSteps;
      door1.moveTo(endPosition);
      door1.setMaxSpeed(maxVelocity);
      
      while((curPos>minVelSteps) && (newInput == false))
        { 
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();         
        }

      endPosition = -moveOn;
      door1.moveTo(endPosition);
      door1.setMaxSpeed(minVelocity);
      
      while((curPos>(-moveOn)) && (newInput == false))
      {
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();
        if(interruptFlagO>0)
          {
          break;
          }
      }
    }
      
      
    else if(curPos <= minVelSteps)
    {
      endPosition = -moveOn;
      door1.moveTo(endPosition);
      door1.setMaxSpeed(minVelocity);
      
      while((curPos>(-moveOn)) && (newInput == false))
      { 
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();
        if(interruptFlagO>0)
          {
          break;
          }
      }
    }
    
    digitalWrite(enPin, HIGH); //Disable Driving Stage
    Serial.println("Door closed!");    
  }


void openDoorFunc()
  {
    newInput = false; //Reset input variable
    interruptFlagO = 0;
    Serial.println("Door opens!");
    digitalWrite(enPin, LOW); //Enable Driving Stage
    door1.setSpeed(0);
    door1.setAcceleration(acceleration);
    door1.setMaxSpeed(0);  
    curPos = door1.currentPosition();     
    Serial.println(curPos);   

    if(curPos<(maxSteps-minVelSteps))
    {
      endPosition = (maxSteps-minVelSteps+breakSteps);
      door1.moveTo(endPosition);
      door1.setMaxSpeed(maxVelocity);
      
      while((curPos<(maxSteps-minVelSteps)) && (newInput == false))
        { 
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();         
        }

      endPosition = (maxSteps+moveOn);
      door1.moveTo(endPosition);
      door1.setMaxSpeed(minVelocity);

      while((curPos<(maxSteps+moveOn)) && (newInput == false))
        {
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();
        if(interruptFlagO>0)
          {
          break;
          }
      }
    }
      
      
    else if(curPos>=(maxSteps-minVelSteps))
    {
      endPosition = (maxSteps+moveOn);
      door1.moveTo(endPosition);
      door1.setMaxSpeed(minVelocity);
      
      while((curPos<(maxSteps+moveOn)) && (newInput == false))
      { 
        door1.run();
        curPos=door1.currentPosition();
        checkSerialMonitor();
        if(interruptFlagO>0)
          {
          break;
          }
      }
    }
    
    digitalWrite(enPin, HIGH); //Disable Driving Stage
    Serial.println("Door opened!");      
   }



void stopDoorFunc()
  {
  newInput=false;
  Serial.println("Door stopped!");
  }




 
